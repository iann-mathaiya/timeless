---
import { actions } from "astro:actions";
import type { FriendPost, UploadedFiles } from "@/lib/types";
import AppLayout from "../layouts/AppLayout.astro";
import type { Media } from "@/lib/types";
import { formatPostDate } from "@/lib/utils";

const { user, session } = Astro.locals;

if (!user) {
	return Astro.redirect("/join");
}

const { data, error } = await Astro.callAction(actions.posts.getFriendsPosts, {
    userId: user.id,
});

const friendsPosts: FriendPost[] = []

if (data?.success) {
    for (const friendPost of data.friendsPostsData) {
        const media = friendPost.post.media as UploadedFiles[];
        
        const postMediaURLs = await Promise.all(
            media.map(async (fileData) => {
                const { data: URLsData, error } = await Astro.callAction(
                    actions.media.getSignedUrl,
                    { key: fileData.fileName },
                );
                if (URLsData?.success) {
                    return {
                        mediaURL: URLsData.signedUrl,
                        fileType: fileData.fileType,
                    };
                }
            })
        );

        const validMediaURLs = postMediaURLs.filter((url): url is Media => url !== null);

        friendsPosts.push({
            ...friendPost,
            post: {
                ...friendPost.post,
                media: validMediaURLs,
            },
        });
    }
}
---

<AppLayout title="Friends & Family">
    <section class="mx-auto w-full max-w-screen-lg overflow-visible">
        <ul class="space-y-4 sm:space-y-6">
            {friendsPosts.map(({post, author}) => 
                <li class="">
                    <div class="px-[17px] flex items-center gap-2">
                        <img class="size-6 min-w-6 rounded-full" src={author.profilePicture} alt={`${author.name} profile`} />
                        <h1 class="text-base text-gray-600 font-medium">{author.name}</h1>
                    </div>
                        <div class="mt-1.5 px-[17px] w-full flex items-center gap-1.5 lg:gap-2.5 overflow-x-auto xl:overflow-visible">
                            {(post.media as Media[]).map(
                                (media: Media) =>
                                    media.fileType === "video/mp4" ? (
                                        <video class="w-full sm:w-80 aspect-square rounded-lg lg:rounded-xl" controls>
                                            <source src={media.mediaURL} type="video/mp4" />
                                            <track src="captions_en.vtt" kind="captions" srclang="en" label="english_captions" />
                                        </video>
                                    ) : (
                                        <img
                                            class="w-full sm:w-80 aspect-square object-cover object-center rounded-lg lg:rounded-xl"
                                            src={media.mediaURL}
                                            alt={`${post.title} media`}
                                        />
                                    ),
                            )}
                        </div>

                        <div class="px-[17px]">
                        <h2 class="mt-1 text-base text-gray-900 font-medium">{post.title}</h2>
                        <p class="pr-4 text-sm text-gray-700 text-balance whitespace-pre-line">
                            {post.description}
                        </p>

                        <p class="mt-1.5 text-xs text-gray-500">
                            {formatPostDate(post.createdAt)}
                        </p>
                    </div>
                </li>
            )}
        </ul>
    </section>
</AppLayout>
