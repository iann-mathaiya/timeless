---
import { auth } from "../lib/auth";
import AppLayout from "../layouts/AppLayout.astro";
import { actions } from "astro:actions";
import { format } from "date-fns";
import { twMerge } from 'tailwind-merge'
import type { Media, UploadedFiles } from "@/lib/types";

const authDetails = await auth.api.getSession({
    headers: Astro.request.headers,
});

if (!authDetails) {
    return Astro.redirect("/join");
}

const { data, error } = await Astro.callAction(actions.media.getUserMedia, {
    userId: authDetails.user.id,
});


const updatedMedia: { mediaData: Media[]; createdAt: string }[] = [];

if (data?.success) {
    for (const post of data.userMedia) {
        const media = post.mediaData as UploadedFiles[];
        const createdAt = post.createdAt as string;

        const postMediaURLs = await Promise.all(
            media.map(async (fileData) => {
                const { data: URLsData, error } = await Astro.callAction(
                    actions.media.getSignedUrl,
                    { key: fileData.fileName },
                );
                if (URLsData?.success) {
                    return {
                        mediaURL: URLsData.signedUrl,
                        fileType: fileData.fileType,
                    };
                }

                return undefined
            })
        )

        const validMediaURLs = postMediaURLs.filter(
            (item): item is Media => item !== undefined
        );

        updatedMedia.push({ ...post, createdAt, mediaData: validMediaURLs });
    }
}

const gallery = Object.values(
    updatedMedia.reduce(
        (acc, item) => {
            const date = item.createdAt.split(" ")[0];
            if (!acc[date]) {
                acc[date] = { createdAt: date, mediaData: [] };
            }
            acc[date].mediaData.push(...item.mediaData);
            return acc;
        },
        {} as Record<string, { createdAt: string; mediaData: Media[] }>,
    ),
);
---

<AppLayout title="Gallery">
    <section class="p-4 sm:p-8">
        <pre>{JSON.stringify(updatedMedia, null, 2)}</pre>
        <pre>{JSON.stringify(gallery, null, 2)}</pre>

        <ul class="flex flex-col sm:flex-row items-center gap-6">
            {
                gallery.map((post) => (
                    <li>
                        <div class="w-40 sm:w-64 group relative cursor-pointer">
                            {(post.mediaData as string[]).map((mediaURL, index) => (
                                <img src={mediaURL} alt="" class={twMerge(
                                    "w-40 sm:w-64 absolute top-0 left-0 border-2 border-white rounded-lg transition-all duration-300 ease-in-out",
                                    index === 0 && 'rotate-0 group-hover:rotate-6',
                                    index === 1 && '-rotate-3 group-hover:-rotate-6',
                                    index === 2 && 'rotate-3 group-hover:rotate-6',
                                )} />
                            ))}
                        </div>
                        <p class="mt-[6.5rem] sm:mt-[12.5rem] text-sm text-center text-gray-600">{format(post.createdAt, "PP")}</p>
                    </li>
                ))
            }
        </ul>
    </section>
</AppLayout>
