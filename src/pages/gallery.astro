---
import { format } from "date-fns";
import { Asterisk } from "lucide-react";
import { actions } from "astro:actions";
import EmptyAlbum from "../assets/empty-album.svg";
import AppLayout from "../layouts/AppLayout.astro";
import type { Media, UploadedFiles } from "@/lib/types";

const { user, session } = Astro.locals;

if (!user) {
	return Astro.redirect("/join");
}

const { data, error } = await Astro.callAction(actions.media.getUserMedia, {
    userId: user.id,
});

const updatedMedia: { mediaData: Media[]; createdAt: Date }[] = [];

if (data?.success) {
    for (const post of data.userMedia) {
        const media = post.mediaData as UploadedFiles[];
        const createdAt = post.createdAt as Date;

        const postMediaURLs = await Promise.all(
            media.map(async (fileData) => {
                const { data: URLsData, error } = await Astro.callAction(
                    actions.media.getSignedUrl,
                    { key: fileData.fileName },
                );
                if (URLsData?.success) {
                    return {
                        mediaURL: URLsData.signedUrl,
                        fileType: fileData.fileType,
                    };
                }

                return undefined;
            }),
        );

        const validMediaURLs = postMediaURLs.filter(
            (item): item is Media => item !== undefined,
        );

        updatedMedia.push({ ...post, createdAt, mediaData: validMediaURLs });
    }
}

const gallery = Object.values(
    updatedMedia.reduce(
        (acc, item) => {
            const date = item.createdAt.toISOString().split("T")[0];
            if (!acc[date]) {
                acc[date] = { createdAt: date, mediaData: [] };
            }
            acc[date].mediaData.push(...item.mediaData);
            return acc;
        },
        {} as Record<string, { createdAt: string; mediaData: Media[] }>,
    ),
);
---

<AppLayout title="Gallery">
    <section class="px-[17px]">

        {gallery.length === 0 && 
            <div class="mt-24 flex flex-col items-center justify-center">
                <EmptyAlbum width={80} height={80} />
                <p class="mt-1 text-base text-gray-900 font-medium">No posts yet</p>
                <p class="text-sm text-gray-600">Create your first post</p>
                <p class="mt-8 text-xs"> 
                    <span class="italic font-medium text-gray-800">Psst</span>
                    <span class="text-gray-600">click on the plus in a circle ðŸ˜‰</span>
                </p>
    
                <div class="mt-12 sm:mt-10">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="sm:hidden size-8 fill-gray-600  animate-bounce">
                        <path d="M13.0001 1.99974L11.0002 1.9996L11.0002 18.1715L7.05044 14.2218L5.63623 15.636L12.0002 22L18.3642 15.636L16.9499 14.2218L13.0002 18.1716L13.0001 1.99974Z"></path>
                    </svg>
    
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="hidden sm:block size-8 fill-gray-900 animate-pulse">
                        <path d="M22.0003 13.0001L22.0004 11.0002L5.82845 11.0002L9.77817 7.05044L8.36396 5.63623L2 12.0002L8.36396 18.3642L9.77817 16.9499L5.8284 13.0002L22.0003 13.0001Z"></path>
                    </svg>
                </div>
    
            </div>
        }

        <ul class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 place-items-center gap-2 sm:gap-4">
            {
                gallery.map((post) => (
                    <li>
                        <div class="w-full aspect-square relative group cursor-pointer border border-red-500 rounded-[12px] overflow-hidden">
                            {post.mediaData[0].fileType === "video/mp4" ? (
                                <video draggable="false" transition:persist class="w-full aspect-square object-cover object-center">
                                    <source src={post.mediaData[0].mediaURL} type="video/mp4" />
                                    <track src="captions_en.vtt" kind="captions" srclang="en" label="english_captions"/>
                                </video>
                            ) : (
                                <img draggable="false" src={post.mediaData[0].mediaURL} alt="" class="w-full aspect-square object-cover object-center"/>
                            )}
                            <p class="min-w-5 sm:min-w-6 h-5 sm:h-6 text-sm absolute bottom-1 right-1 flex items-center justify-center text-white bg-gray-700 rounded-[4px] rounded-br-[8px]">
                                {post.mediaData.length <= 9 ? post.mediaData.length : <Asterisk size={16} /> }
                            </p>
                        </div>

                        <p class="mt-0.5 px-1 text-sm text-start text-gray-600">
                            {
                                parseInt(post.createdAt) === new Date().getFullYear() ? 
                                format(post.createdAt, "EEE, MMM do") : 
                                format(post.createdAt, "EEE, MMM do yyyy") 
                            }
                        </p>
                    </li>
                ))
            }
        </ul>
    </section>
</AppLayout>
