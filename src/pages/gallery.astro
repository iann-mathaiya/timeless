---
import { auth } from "../lib/auth";
import { format } from "date-fns";
import { Asterisk } from "lucide-react";
import { actions } from "astro:actions";
import AppLayout from "../layouts/AppLayout.astro";
import type { Media, UploadedFiles } from "@/lib/types";

const authDetails = await auth.api.getSession({
    headers: Astro.request.headers,
});

if (!authDetails) {
    return Astro.redirect("/join");
}

const { data, error } = await Astro.callAction(actions.media.getUserMedia, {
    userId: authDetails.user.id,
});

const updatedMedia: { mediaData: Media[]; createdAt: Date }[] = [];

if (data?.success) {
    for (const post of data.userMedia) {
        const media = post.mediaData as UploadedFiles[];
        const createdAt = post.createdAt as Date;

        const postMediaURLs = await Promise.all(
            media.map(async (fileData) => {
                const { data: URLsData, error } = await Astro.callAction(
                    actions.media.getSignedUrl,
                    { key: fileData.fileName },
                );
                if (URLsData?.success) {
                    return {
                        mediaURL: URLsData.signedUrl,
                        fileType: fileData.fileType,
                    };
                }

                return undefined;
            }),
        );

        const validMediaURLs = postMediaURLs.filter(
            (item): item is Media => item !== undefined,
        );

        updatedMedia.push({ ...post, createdAt, mediaData: validMediaURLs });
    }
}

const gallery = Object.values(
    updatedMedia.reduce(
        (acc, item) => {
            const date = item.createdAt.toISOString().split("T")[0];
            if (!acc[date]) {
                acc[date] = { createdAt: date, mediaData: [] };
            }
            acc[date].mediaData.push(...item.mediaData);
            return acc;
        },
        {} as Record<string, { createdAt: string; mediaData: Media[] }>,
    ),
);
---

<AppLayout title="Gallery">
    <section class="">
        <ul
            class="grid grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 place-items-center gap-4"
        >
            {
                gallery.map((post) => (
                    <li>
                        <div class="w-40 md:w-52 lg:w-56 h-40 md:h-52 lg:h-56 relative group cursor-pointer">
                            {post.mediaData[0].fileType === "video/mp4" ? (
                                <video draggable="false" class="w-40 md:w-52 lg:w-56 h-40 md:h-52 lg:h-56 object-cover object-center rounded-[12px]">
                                    <source src={post.mediaData[0].mediaURL} type="video/mp4" />
                                    <track src="captions_en.vtt" kind="captions" srclang="en" label="english_captions"/>
                                </video>
                            ) : (
                                <img draggable="false" src={post.mediaData[0].mediaURL} alt="" class="w-40 md:w-52 lg:w-56 h-40 md:h-52 lg:h-56 object-cover object-center rounded-[12px]"/>
                            )}
                            <p class="min-w-5 sm:min-w-6 h-5 sm:h-6 text-sm absolute bottom-1 right-1 flex items-center justify-center text-white bg-gray-700 rounded-[4px] rounded-br-[8px]">
                                {post.mediaData.length <= 9 ? post.mediaData.length : <Asterisk size={16} /> }
                            </p>
                        </div>

                        <p class="mt-0.5 px-1 text-sm text-start text-gray-600">
                            {
                                parseInt(post.createdAt) === new Date().getFullYear() ? 
                                format(post.createdAt, "EEE, MMM do") : 
                                format(post.createdAt, "EEE, MMM do yyyy") 
                            }
                        </p>
                    </li>
                ))
            }
        </ul>
    </section>
</AppLayout>
